
Smart Door System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00001178  0000120c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800144  00800144  000012f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331f  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117c  00000000  00000000  00004a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bec  00000000  00000000  00005bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  000077bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf8  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fcf  00000000  00000000  00008d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000acdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_9>
      28:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_10>
      2c:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Smart_Door.h"


int main(void)
{		
	Project_Init();
      92:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Project_Init>
	while (1)
	{
		App();
      96:	0e 94 08 03 	call	0x610	; 0x610 <App>
      9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <Drivers_Init>:
	}
}

void Drivers_Init (void)
{
	PORT_Init();
      9c:	0e 94 82 07 	call	0xf04	; 0xf04 <PORT_Init>
	LCD_Init();
      a0:	0e 94 04 04 	call	0x808	; 0x808 <LCD_Init>
	IRQH_SetGlobalInterrupts(INTERRUPT_ENABLE);
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 22 06 	call	0xc44	; 0xc44 <IRQH_SetGlobalInterrupts>
	IRQH_SetCallBackUART(UART_ReceiveByte);
      aa:	8a e5       	ldi	r24, 0x5A	; 90
      ac:	98 e0       	ldi	r25, 0x08	; 8
      ae:	0e 94 2e 06 	call	0xc5c	; 0xc5c <IRQH_SetCallBackUART>
	UART_Init();
      b2:	0e 94 3d 08 	call	0x107a	; 0x107a <UART_Init>
	I2C_MasterInit();
      b6:	0e 94 be 05 	call	0xb7c	; 0xb7c <I2C_MasterInit>
	GPT_Init();
      ba:	0e 94 ab 05 	call	0xb56	; 0xb56 <GPT_Init>
	ServoMotor_Init();
      be:	0e 94 f6 04 	call	0x9ec	; 0x9ec <ServoMotor_Init>
	ServoMotor_Home();
      c2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ServoMotor_Home>
      c6:	08 95       	ret

000000c8 <Welcome_Message>:
	CheckIfPasswordIsStoredInEEPROM();
}

void Welcome_Message (void)
{
	LCD_GoTo(0,0);
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Smart Door");
      d0:	8a e8       	ldi	r24, 0x8A	; 138
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	LCD_GoTo(0,11);
      d8:	6b e0       	ldi	r22, 0x0B	; 11
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteChar(Door_Custom_Character); 
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
	LCD_GoTo(1,0);
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Project");
      ee:	85 e9       	ldi	r24, 0x95	; 149
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	2f ef       	ldi	r18, 0xFF	; 255
      f8:	8d e3       	ldi	r24, 0x3D	; 61
      fa:	99 e4       	ldi	r25, 0x49	; 73
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <Welcome_Message+0x34>
     104:	00 c0       	rjmp	.+0      	; 0x106 <Welcome_Message+0x3e>
     106:	00 00       	nop
	_delay_ms(1500);
	LCD_Clear();
     108:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	
	LCD_GoTo(0,0);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("You Have");
     114:	8d e9       	ldi	r24, 0x9D	; 157
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	LCD_GoTo(1,0);
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Three Trials");
     124:	86 ea       	ldi	r24, 0xA6	; 166
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     12c:	2f ef       	ldi	r18, 0xFF	; 255
     12e:	87 ea       	ldi	r24, 0xA7	; 167
     130:	91 e6       	ldi	r25, 0x61	; 97
     132:	21 50       	subi	r18, 0x01	; 1
     134:	80 40       	sbci	r24, 0x00	; 0
     136:	90 40       	sbci	r25, 0x00	; 0
     138:	e1 f7       	brne	.-8      	; 0x132 <Welcome_Message+0x6a>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <Welcome_Message+0x74>
     13c:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
     13e:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	
	LCD_GoTo(0,0);
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Made By :");
     14a:	83 eb       	ldi	r24, 0xB3	; 179
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	LCD_GoTo(1,0);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Ali Mamdoh"); 
     15a:	8d eb       	ldi	r24, 0xBD	; 189
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     162:	2f ef       	ldi	r18, 0xFF	; 255
     164:	8d e3       	ldi	r24, 0x3D	; 61
     166:	99 e4       	ldi	r25, 0x49	; 73
     168:	21 50       	subi	r18, 0x01	; 1
     16a:	80 40       	sbci	r24, 0x00	; 0
     16c:	90 40       	sbci	r25, 0x00	; 0
     16e:	e1 f7       	brne	.-8      	; 0x168 <Welcome_Message+0xa0>
     170:	00 c0       	rjmp	.+0      	; 0x172 <Welcome_Message+0xaa>
     172:	00 00       	nop
	_delay_ms(1500);
	LCD_Clear();
     174:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
     178:	08 95       	ret

0000017a <Write_Password_In_EEPROM>:
	}
}

void Write_Password_In_EEPROM (void)
{
	EEPROM_WriteMultipleBytes(Password , PASSWORD_SIZE , EEPROM_ADDRESS , PASSWORD_ADRESS);
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	40 e5       	ldi	r20, 0x50	; 80
     17e:	64 e0       	ldi	r22, 0x04	; 4
     180:	8e e7       	ldi	r24, 0x7E	; 126
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 55 03 	call	0x6aa	; 0x6aa <EEPROM_WriteMultipleBytes>
     188:	8f e1       	ldi	r24, 0x1F	; 31
     18a:	9e e4       	ldi	r25, 0x4E	; 78
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <Write_Password_In_EEPROM+0x12>
     190:	00 c0       	rjmp	.+0      	; 0x192 <Write_Password_In_EEPROM+0x18>
     192:	00 00       	nop
	_delay_ms(5);
	Pass_Flag =1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Pass_Flag>
	EEPROM_WriteByte(Pass_Flag , EEPROM_ADDRESS , PASSWORD_FLAG_ADRESS);
     19a:	45 e0       	ldi	r20, 0x05	; 5
     19c:	60 e5       	ldi	r22, 0x50	; 80
     19e:	0e 94 24 03 	call	0x648	; 0x648 <EEPROM_WriteByte>
     1a2:	8f e1       	ldi	r24, 0x1F	; 31
     1a4:	9e e4       	ldi	r25, 0x4E	; 78
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <Write_Password_In_EEPROM+0x2c>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <Write_Password_In_EEPROM+0x32>
     1ac:	00 00       	nop
	_delay_ms(5);
	LCD_Clear();
     1ae:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("PIN SET SUCCESS");
     1ba:	88 ec       	ldi	r24, 0xC8	; 200
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     1c2:	9f ef       	ldi	r25, 0xFF	; 255
     1c4:	2d e3       	ldi	r18, 0x3D	; 61
     1c6:	89 e4       	ldi	r24, 0x49	; 73
     1c8:	91 50       	subi	r25, 0x01	; 1
     1ca:	20 40       	sbci	r18, 0x00	; 0
     1cc:	80 40       	sbci	r24, 0x00	; 0
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <Write_Password_In_EEPROM+0x4e>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Write_Password_In_EEPROM+0x58>
     1d2:	00 00       	nop
	_delay_ms(1500);
	LCD_Clear();
     1d4:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
     1d8:	08 95       	ret

000001da <SetNewPinForFirstTimeOnly>:
	}
	
}

void SetNewPinForFirstTimeOnly (void)
{
     1da:	cf 93       	push	r28
	uint8 i=0 ;
	LCD_GoTo(0,0);
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Set New PIN :");
     1e4:	88 ed       	ldi	r24, 0xD8	; 216
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	if (Return_Byte == 0)
     1ec:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Return_Byte>
     1f0:	81 11       	cpse	r24, r1
     1f2:	1f c0       	rjmp	.+62     	; 0x232 <SetNewPinForFirstTimeOnly+0x58>
     1f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		while (i < PASSWORD_SIZE)
		{
			Return_Byte = UART_ReceivedByte_Status();
     1f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_ReceivedByte_Status>
     1fa:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Return_Byte>
			if (Return_Byte == 1)
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	89 f4       	brne	.+34     	; 0x224 <SetNewPinForFirstTimeOnly+0x4a>
			{
				Password[i] = UART_RECEIVED_BYTE;
     202:	ec 2f       	mov	r30, r28
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	e2 58       	subi	r30, 0x82	; 130
     208:	ff 4f       	sbci	r31, 0xFF	; 255
     20a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <UART_RECEIVED_BYTE>
     20e:	80 83       	st	Z, r24
				LCD_GoTo(1,i);
     210:	6c 2f       	mov	r22, r28
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
				LCD_WriteChar('*');
     218:	8a e2       	ldi	r24, 0x2A	; 42
     21a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
				i++;
     21e:	cf 5f       	subi	r28, 0xFF	; 255
				Return_Byte=0;
     220:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
			}
			if (i == PASSWORD_SIZE)
     224:	c4 30       	cpi	r28, 0x04	; 4
     226:	19 f4       	brne	.+6      	; 0x22e <SetNewPinForFirstTimeOnly+0x54>
			{
				Write_Password_In_EEPROM();
     228:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Password_In_EEPROM>
     22c:	02 c0       	rjmp	.+4      	; 0x232 <SetNewPinForFirstTimeOnly+0x58>
	uint8 i=0 ;
	LCD_GoTo(0,0);
	LCD_WriteString("Set New PIN :");
	if (Return_Byte == 0)
	{
		while (i < PASSWORD_SIZE)
     22e:	c4 30       	cpi	r28, 0x04	; 4
     230:	10 f3       	brcs	.-60     	; 0x1f6 <SetNewPinForFirstTimeOnly+0x1c>
				Write_Password_In_EEPROM();
			}
		}
		
	}
}
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <CheckIfPasswordIsStoredInEEPROM>:
	LCD_Clear();
}

void CheckIfPasswordIsStoredInEEPROM (void)
{
	Pass_Flag= EEPROM_ReadByte(EEPROM_ADDRESS , PASSWORD_FLAG_ADRESS);
     236:	65 e0       	ldi	r22, 0x05	; 5
     238:	80 e5       	ldi	r24, 0x50	; 80
     23a:	0e 94 3b 03 	call	0x676	; 0x676 <EEPROM_ReadByte>
     23e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <Pass_Flag>
     242:	8f e1       	ldi	r24, 0x1F	; 31
     244:	9e e4       	ldi	r25, 0x4E	; 78
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <CheckIfPasswordIsStoredInEEPROM+0x10>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <CheckIfPasswordIsStoredInEEPROM+0x16>
     24c:	00 00       	nop
	_delay_ms(5);
	if (Pass_Flag == 0)
     24e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <Pass_Flag>
     252:	81 11       	cpse	r24, r1
     254:	1b c0       	rjmp	.+54     	; 0x28c <CheckIfPasswordIsStoredInEEPROM+0x56>
	{
		Return_Byte=0;
     256:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
		SetNewPinForFirstTimeOnly();
     25a:	0e 94 ed 00 	call	0x1da	; 0x1da <SetNewPinForFirstTimeOnly>
		Return_Byte=0;
     25e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
		LCD_Clear();
     262:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
		LCD_GoTo(0,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("1-Set New Pin:");
     26e:	86 ee       	ldi	r24, 0xE6	; 230
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
		LCD_GoTo(1,0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("2-Login:");
     27e:	85 ef       	ldi	r24, 0xF5	; 245
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
		ServoMotor_Home();
     286:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ServoMotor_Home>
     28a:	08 95       	ret
	}
	else if (Pass_Flag == 1)
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	91 f4       	brne	.+36     	; 0x2b4 <CheckIfPasswordIsStoredInEEPROM+0x7e>
	{
		LCD_GoTo(0,0);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("1-Set New Pin:");
     298:	86 ee       	ldi	r24, 0xE6	; 230
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
		LCD_GoTo(1,0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("2-Login:");
     2a8:	85 ef       	ldi	r24, 0xF5	; 245
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
		ServoMotor_Home();
     2b0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ServoMotor_Home>
     2b4:	08 95       	ret

000002b6 <Project_Init>:
	ServoMotor_Home();
}

void Project_Init (void)
{
	Drivers_Init();
     2b6:	0e 94 4e 00 	call	0x9c	; 0x9c <Drivers_Init>
	LCD_WriteCustomCharacter();
     2ba:	0e 94 bf 04 	call	0x97e	; 0x97e <LCD_WriteCustomCharacter>
	Welcome_Message();
     2be:	0e 94 64 00 	call	0xc8	; 0xc8 <Welcome_Message>
	CheckIfPasswordIsStoredInEEPROM();
     2c2:	0e 94 1b 01 	call	0x236	; 0x236 <CheckIfPasswordIsStoredInEEPROM>
     2c6:	08 95       	ret

000002c8 <Right_Password_Sequence>:
	LCD_Clear();
}

void Right_Password_Sequence (void)
{
	Wrong_Pass_Cntr=0;
     2c8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <Wrong_Pass_Cntr>
	LCD_Clear();
     2cc:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Welcome");
     2d8:	8e ef       	ldi	r24, 0xFE	; 254
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	ServoMotor_SetAngle18(90);
     2e0:	8a e5       	ldi	r24, 0x5A	; 90
     2e2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <ServoMotor_SetAngle18>
     2e6:	2f ef       	ldi	r18, 0xFF	; 255
     2e8:	8b e7       	ldi	r24, 0x7B	; 123
     2ea:	92 e9       	ldi	r25, 0x92	; 146
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	80 40       	sbci	r24, 0x00	; 0
     2f0:	90 40       	sbci	r25, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <Right_Password_Sequence+0x24>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <Right_Password_Sequence+0x2e>
     2f6:	00 00       	nop
	_delay_ms(3000);
	ServoMotor_Home();
     2f8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ServoMotor_Home>
	Return_Value =0;
     2fc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Return_Value>
	CheckIfPasswordIsStoredInEEPROM();
     300:	0e 94 1b 01 	call	0x236	; 0x236 <CheckIfPasswordIsStoredInEEPROM>
     304:	08 95       	ret

00000306 <PIN_Entry_Sequence>:
		Wrong_Pass_Cntr=0;
	}
}

void PIN_Entry_Sequence(void)
{
     306:	cf 93       	push	r28
	uint8 i=0;
	LCD_Clear();
     308:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("ENTER PIN:");
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	ServoMotor_Home();
     31c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <ServoMotor_Home>
	Return_Byte =0;
     320:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
	LCD_GoTo(1 , 0);
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	}
}

void PIN_Entry_Sequence(void)
{
	uint8 i=0;
     32c:	c0 e0       	ldi	r28, 0x00	; 0
	ServoMotor_Home();
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
	{
		Return_Byte = UART_ReceivedByte_Status();
     32e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_ReceivedByte_Status>
     332:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Return_Byte>
		if (Return_Byte == 1)
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	69 f4       	brne	.+26     	; 0x354 <PIN_Entry_Sequence+0x4e>
		{
			UART_Received_Data[i] = UART_RECEIVED_BYTE;
     33a:	ec 2f       	mov	r30, r28
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	e0 5a       	subi	r30, 0xA0	; 160
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <UART_RECEIVED_BYTE>
     346:	80 83       	st	Z, r24
			LCD_WriteChar('*');
     348:	8a e2       	ldi	r24, 0x2A	; 42
     34a:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
			i++;
     34e:	cf 5f       	subi	r28, 0xFF	; 255
			Return_Byte=0;
     350:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
		}
		if (i == PASSWORD_SIZE)
     354:	c4 30       	cpi	r28, 0x04	; 4
     356:	21 f4       	brne	.+8      	; 0x360 <PIN_Entry_Sequence+0x5a>
		{
			Return_Value = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Return_Value>
     35e:	06 c0       	rjmp	.+12     	; 0x36c <PIN_Entry_Sequence+0x66>
	LCD_GoTo(0,0);
	LCD_WriteString("ENTER PIN:");
	ServoMotor_Home();
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
     360:	c4 30       	cpi	r28, 0x04	; 4
     362:	28 f3       	brcs	.-54     	; 0x32e <PIN_Entry_Sequence+0x28>
		{
			Return_Value = 1;
		}
	}
	i=0;
	if (Return_Value == 1)
     364:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Return_Value>
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	59 f5       	brne	.+86     	; 0x3c2 <PIN_Entry_Sequence+0xbc>
	{
		Pass_Ptr = EEPROM_ReadMultipleBytes(EEPROM_ADDRESS , PASSWORD_ADRESS);
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	80 e5       	ldi	r24, 0x50	; 80
     370:	0e 94 80 03 	call	0x700	; 0x700 <EEPROM_ReadMultipleBytes>
     374:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     378:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     37c:	8f e1       	ldi	r24, 0x1F	; 31
     37e:	9e e4       	ldi	r25, 0x4E	; 78
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <PIN_Entry_Sequence+0x7a>
     384:	00 c0       	rjmp	.+0      	; 0x386 <PIN_Entry_Sequence+0x80>
     386:	00 00       	nop
		_delay_ms(5);
		if ((UART_Received_Data[0] == Pass_Ptr[0]) && (UART_Received_Data[1] == Pass_Ptr[1]) && (UART_Received_Data[2] == Pass_Ptr[2]) && (UART_Received_Data[3] == Pass_Ptr[3]) )
     388:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
     38c:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__data_end+0x1>
     390:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <UART_Received_Data>
     394:	80 81       	ld	r24, Z
     396:	98 13       	cpse	r25, r24
     398:	12 c0       	rjmp	.+36     	; 0x3be <PIN_Entry_Sequence+0xb8>
     39a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <UART_Received_Data+0x1>
     39e:	81 81       	ldd	r24, Z+1	; 0x01
     3a0:	98 13       	cpse	r25, r24
     3a2:	0d c0       	rjmp	.+26     	; 0x3be <PIN_Entry_Sequence+0xb8>
     3a4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <UART_Received_Data+0x2>
     3a8:	82 81       	ldd	r24, Z+2	; 0x02
     3aa:	98 13       	cpse	r25, r24
     3ac:	08 c0       	rjmp	.+16     	; 0x3be <PIN_Entry_Sequence+0xb8>
     3ae:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_Received_Data+0x3>
     3b2:	83 81       	ldd	r24, Z+3	; 0x03
     3b4:	98 13       	cpse	r25, r24
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <PIN_Entry_Sequence+0xb8>
		{
			Right_Password_Sequence();
     3b8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Right_Password_Sequence>
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <PIN_Entry_Sequence+0xbc>
		}
		else
		{
			Wrong_Password_Sequence();
     3be:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Wrong_Password_Sequence>
		}
	}
}
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <Wrong_Password_Sequence>:
	
}

void Wrong_Password_Sequence (void)
{
	LCD_Clear();
     3c6:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Wrong Pin");
     3d2:	81 e1       	ldi	r24, 0x11	; 17
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     3da:	2f ef       	ldi	r18, 0xFF	; 255
     3dc:	8d e3       	ldi	r24, 0x3D	; 61
     3de:	99 e4       	ldi	r25, 0x49	; 73
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	80 40       	sbci	r24, 0x00	; 0
     3e4:	90 40       	sbci	r25, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <Wrong_Password_Sequence+0x1a>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <Wrong_Password_Sequence+0x24>
     3ea:	00 00       	nop
	_delay_ms(1500);
	Wrong_Pass_Cntr++;
     3ec:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Wrong_Pass_Cntr>
     3f0:	8f 5f       	subi	r24, 0xFF	; 255
     3f2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Wrong_Pass_Cntr>
	if (Wrong_Pass_Cntr < 3)
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	b0 f4       	brcc	.+44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		LCD_Clear();
     3fa:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
		LCD_GoTo(0,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("Try Again");
     406:	8b e1       	ldi	r24, 0x1B	; 27
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	8d e3       	ldi	r24, 0x3D	; 61
     412:	99 e4       	ldi	r25, 0x49	; 73
     414:	21 50       	subi	r18, 0x01	; 1
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	90 40       	sbci	r25, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
		_delay_ms(1500);
		PIN_Entry_Sequence();
     420:	0e 94 83 01 	call	0x306	; 0x306 <PIN_Entry_Sequence>
     424:	08 95       	ret
	}
	else
	{
		LED_ON();
     426:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_ON>
		Buzzer_ON();
     42a:	0e 94 1a 03 	call	0x634	; 0x634 <Buzzer_ON>
     42e:	2f ef       	ldi	r18, 0xFF	; 255
     430:	87 ea       	ldi	r24, 0xA7	; 167
     432:	91 e6       	ldi	r25, 0x61	; 97
     434:	21 50       	subi	r18, 0x01	; 1
     436:	80 40       	sbci	r24, 0x00	; 0
     438:	90 40       	sbci	r25, 0x00	; 0
     43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43e:	00 00       	nop
		_delay_ms(2000);
		LED_OFF();
     440:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LED_OFF>
		Buzzer_OFF();
     444:	0e 94 1f 03 	call	0x63e	; 0x63e <Buzzer_OFF>
		Return_Value =0;
     448:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Return_Value>
		CheckIfPasswordIsStoredInEEPROM();
     44c:	0e 94 1b 01 	call	0x236	; 0x236 <CheckIfPasswordIsStoredInEEPROM>
		Wrong_Pass_Cntr=0;
     450:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <Wrong_Pass_Cntr>
     454:	08 95       	ret

00000456 <New_PIN_Entry_Sequence>:
		}
	}
}

void New_PIN_Entry_Sequence(void)
{
     456:	cf 93       	push	r28
	uint8 i=0;
	LCD_Clear();
     458:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("ENTER NEW PIN:");
     464:	85 e2       	ldi	r24, 0x25	; 37
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	Return_Byte =0;
     46c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
	LCD_GoTo(1 , 0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	}
}

void New_PIN_Entry_Sequence(void)
{
	uint8 i=0;
     478:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_WriteString("ENTER NEW PIN:");
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
	{
		Return_Byte = UART_ReceivedByte_Status();
     47a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_ReceivedByte_Status>
     47e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Return_Byte>
		if (Return_Byte == 1)
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	69 f4       	brne	.+26     	; 0x4a0 <New_PIN_Entry_Sequence+0x4a>
		{
			Password[i] = UART_RECEIVED_BYTE;
     486:	ec 2f       	mov	r30, r28
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e2 58       	subi	r30, 0x82	; 130
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <UART_RECEIVED_BYTE>
     492:	80 83       	st	Z, r24
			LCD_WriteChar('*');
     494:	8a e2       	ldi	r24, 0x2A	; 42
     496:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
			i++;
     49a:	cf 5f       	subi	r28, 0xFF	; 255
			Return_Byte=0;
     49c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
		}
		if (i == PASSWORD_SIZE)
     4a0:	c4 30       	cpi	r28, 0x04	; 4
     4a2:	21 f4       	brne	.+8      	; 0x4ac <New_PIN_Entry_Sequence+0x56>
		{
			Return_Value = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Return_Value>
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <New_PIN_Entry_Sequence+0x62>
	LCD_Clear();
	LCD_GoTo(0,0);
	LCD_WriteString("ENTER NEW PIN:");
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
     4ac:	c4 30       	cpi	r28, 0x04	; 4
     4ae:	28 f3       	brcs	.-54     	; 0x47a <New_PIN_Entry_Sequence+0x24>
		{
			Return_Value = 1;
		}
	}
	i=0;
	if (Return_Value == 1)
     4b0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Return_Value>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <New_PIN_Entry_Sequence+0x6a>
	{
		Write_Password_In_EEPROM ();
     4b8:	0e 94 bd 00 	call	0x17a	; 0x17a <Write_Password_In_EEPROM>
		CheckIfPasswordIsStoredInEEPROM();
     4bc:	0e 94 1b 01 	call	0x236	; 0x236 <CheckIfPasswordIsStoredInEEPROM>
	}
	
}
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <Wrong_Password_Sequence_For_Changing_Pin>:

void Wrong_Password_Sequence_For_Changing_Pin (void)
{
	LCD_Clear();
     4c4:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("Wrong Pin");
     4d0:	81 e1       	ldi	r24, 0x11	; 17
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	8d e3       	ldi	r24, 0x3D	; 61
     4dc:	99 e4       	ldi	r25, 0x49	; 73
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	80 40       	sbci	r24, 0x00	; 0
     4e2:	90 40       	sbci	r25, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <Wrong_Password_Sequence_For_Changing_Pin+0x1a>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <Wrong_Password_Sequence_For_Changing_Pin+0x24>
     4e8:	00 00       	nop
	_delay_ms(1500);
	Wrong_Pass_Cntr++;
     4ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Wrong_Pass_Cntr>
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Wrong_Pass_Cntr>
	if (Wrong_Pass_Cntr < 3)
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	b0 f4       	brcc	.+44     	; 0x524 <Wrong_Password_Sequence_For_Changing_Pin+0x60>
	{
		LCD_Clear();
     4f8:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
		LCD_GoTo(0,0);
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
		LCD_WriteString("Try Again");
     504:	8b e1       	ldi	r24, 0x1B	; 27
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
     50c:	2f ef       	ldi	r18, 0xFF	; 255
     50e:	8d e3       	ldi	r24, 0x3D	; 61
     510:	99 e4       	ldi	r25, 0x49	; 73
     512:	21 50       	subi	r18, 0x01	; 1
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	90 40       	sbci	r25, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <Wrong_Password_Sequence_For_Changing_Pin+0x4e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <Wrong_Password_Sequence_For_Changing_Pin+0x58>
     51c:	00 00       	nop
		_delay_ms(1500);
		Change_PIN_Sequence();
     51e:	0e 94 aa 02 	call	0x554	; 0x554 <Change_PIN_Sequence>
     522:	08 95       	ret
	}
	else
	{
		LED_ON();
     524:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LED_ON>
		Buzzer_ON();
     528:	0e 94 1a 03 	call	0x634	; 0x634 <Buzzer_ON>
     52c:	2f ef       	ldi	r18, 0xFF	; 255
     52e:	87 ea       	ldi	r24, 0xA7	; 167
     530:	91 e6       	ldi	r25, 0x61	; 97
     532:	21 50       	subi	r18, 0x01	; 1
     534:	80 40       	sbci	r24, 0x00	; 0
     536:	90 40       	sbci	r25, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <Wrong_Password_Sequence_For_Changing_Pin+0x6e>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <Wrong_Password_Sequence_For_Changing_Pin+0x78>
     53c:	00 00       	nop
		_delay_ms(2000);
		LED_OFF();
     53e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <LED_OFF>
		Buzzer_OFF();
     542:	0e 94 1f 03 	call	0x63e	; 0x63e <Buzzer_OFF>
		Return_Value =0;
     546:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <Return_Value>
		CheckIfPasswordIsStoredInEEPROM();
     54a:	0e 94 1b 01 	call	0x236	; 0x236 <CheckIfPasswordIsStoredInEEPROM>
		Wrong_Pass_Cntr=0;
     54e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <Wrong_Pass_Cntr>
     552:	08 95       	ret

00000554 <Change_PIN_Sequence>:
		}
	}
}

void Change_PIN_Sequence(void)
{
     554:	cf 93       	push	r28
	uint8 i=0;
	Pass_Ptr = EEPROM_ReadMultipleBytes(EEPROM_ADDRESS , PASSWORD_ADRESS);
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	80 e5       	ldi	r24, 0x50	; 80
     55a:	0e 94 80 03 	call	0x700	; 0x700 <EEPROM_ReadMultipleBytes>
     55e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     562:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     566:	8f e1       	ldi	r24, 0x1F	; 31
     568:	9e e4       	ldi	r25, 0x4E	; 78
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <Change_PIN_Sequence+0x16>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <Change_PIN_Sequence+0x1c>
     570:	00 00       	nop
	_delay_ms(5);
	LCD_Clear();
     572:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_Clear>
	LCD_GoTo(0,0);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	LCD_WriteString("ENTER OLD PIN:");
     57e:	84 e3       	ldi	r24, 0x34	; 52
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_WriteString>
	Return_Byte =0;
     586:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
	LCD_GoTo(1 , 0);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 9a 04 	call	0x934	; 0x934 <LCD_GoTo>
	}
}

void Change_PIN_Sequence(void)
{
	uint8 i=0;
     592:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_WriteString("ENTER OLD PIN:");
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
	{
		Return_Byte = UART_ReceivedByte_Status();
     594:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_ReceivedByte_Status>
     598:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Return_Byte>
		if (Return_Byte == 1)
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	69 f4       	brne	.+26     	; 0x5ba <Change_PIN_Sequence+0x66>
		{
			UART_Received_Data[i] = UART_RECEIVED_BYTE;
     5a0:	ec 2f       	mov	r30, r28
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	e0 5a       	subi	r30, 0xA0	; 160
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <UART_RECEIVED_BYTE>
     5ac:	80 83       	st	Z, r24
			LCD_WriteChar('*');
     5ae:	8a e2       	ldi	r24, 0x2A	; 42
     5b0:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
			i++;
     5b4:	cf 5f       	subi	r28, 0xFF	; 255
			Return_Byte=0;
     5b6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <Return_Byte>
		}
		if (i == PASSWORD_SIZE)
     5ba:	c4 30       	cpi	r28, 0x04	; 4
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <Change_PIN_Sequence+0x72>
		{
			Return_Value = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Return_Value>
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <Change_PIN_Sequence+0x7e>
	LCD_Clear();
	LCD_GoTo(0,0);
	LCD_WriteString("ENTER OLD PIN:");
	Return_Byte =0;
	LCD_GoTo(1 , 0);
	while (i < PASSWORD_SIZE)
     5c6:	c4 30       	cpi	r28, 0x04	; 4
     5c8:	28 f3       	brcs	.-54     	; 0x594 <Change_PIN_Sequence+0x40>
		{
			Return_Value = 1;
		}
	}
	i=0;
	if (Return_Value == 1)
     5ca:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Return_Value>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	e9 f4       	brne	.+58     	; 0x60c <Change_PIN_Sequence+0xb8>
	{
		if ((UART_Received_Data[0] == Pass_Ptr[0]) && (UART_Received_Data[1] == Pass_Ptr[1]) && (UART_Received_Data[2] == Pass_Ptr[2]) && (UART_Received_Data[3] == Pass_Ptr[3]) )
     5d2:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <__data_end>
     5d6:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <__data_end+0x1>
     5da:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <UART_Received_Data>
     5de:	80 81       	ld	r24, Z
     5e0:	98 13       	cpse	r25, r24
     5e2:	12 c0       	rjmp	.+36     	; 0x608 <Change_PIN_Sequence+0xb4>
     5e4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <UART_Received_Data+0x1>
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
     5ea:	98 13       	cpse	r25, r24
     5ec:	0d c0       	rjmp	.+26     	; 0x608 <Change_PIN_Sequence+0xb4>
     5ee:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <UART_Received_Data+0x2>
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	98 13       	cpse	r25, r24
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <Change_PIN_Sequence+0xb4>
     5f8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <UART_Received_Data+0x3>
     5fc:	83 81       	ldd	r24, Z+3	; 0x03
     5fe:	98 13       	cpse	r25, r24
     600:	03 c0       	rjmp	.+6      	; 0x608 <Change_PIN_Sequence+0xb4>
		{
			New_PIN_Entry_Sequence();
     602:	0e 94 2b 02 	call	0x456	; 0x456 <New_PIN_Entry_Sequence>
     606:	02 c0       	rjmp	.+4      	; 0x60c <Change_PIN_Sequence+0xb8>
			
		}
		else
		{
			 Wrong_Password_Sequence_For_Changing_Pin();  
     608:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Wrong_Password_Sequence_For_Changing_Pin>
		}
	}
}
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <App>:
uint8 * Pass_Ptr = NULL;


void App (void)
{
	Return_Byte = UART_ReceivedByte_Status();
     610:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_ReceivedByte_Status>
     614:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Return_Byte>
	if (Return_Byte == 1)
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	59 f4       	brne	.+22     	; 0x632 <App+0x22>
	{
		if (UART_RECEIVED_BYTE == '1')
     61c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <UART_RECEIVED_BYTE>
     620:	81 33       	cpi	r24, 0x31	; 49
     622:	19 f4       	brne	.+6      	; 0x62a <App+0x1a>
		{
			Change_PIN_Sequence();
     624:	0e 94 aa 02 	call	0x554	; 0x554 <Change_PIN_Sequence>
     628:	08 95       	ret
		}
		else  if (UART_RECEIVED_BYTE == '2')
     62a:	82 33       	cpi	r24, 0x32	; 50
     62c:	11 f4       	brne	.+4      	; 0x632 <App+0x22>
		{
			PIN_Entry_Sequence();
     62e:	0e 94 83 01 	call	0x306	; 0x306 <PIN_Entry_Sequence>
     632:	08 95       	ret

00000634 <Buzzer_ON>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_ON (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_HIGH);
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	85 e1       	ldi	r24, 0x15	; 21
     638:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     63c:	08 95       	ret

0000063e <Buzzer_OFF>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void Buzzer_OFF (void)
{
	DIO_WriteChannel(PORTC_PIN5 , PIN_LOW);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	85 e1       	ldi	r24, 0x15	; 21
     642:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     646:	08 95       	ret

00000648 <EEPROM_WriteByte>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void EEPROM_WriteByte (uint8 Data , uint8 EEPROM_Address , uint8 Byte_Address)
{
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	c8 2f       	mov	r28, r24
     650:	16 2f       	mov	r17, r22
     652:	d4 2f       	mov	r29, r20
	I2C_StartCondition();
     654:	0e 94 c9 05 	call	0xb92	; 0xb92 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
     658:	81 2f       	mov	r24, r17
     65a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <I2C_SlaveAddress_WriteOperation>
	I2C_WriteByte(Byte_Address);
     65e:	8d 2f       	mov	r24, r29
     660:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
	I2C_WriteByte(Data);
     664:	8c 2f       	mov	r24, r28
     666:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
	I2C_StopCondition();
     66a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <I2C_StopCondition>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	08 95       	ret

00000676 <EEPROM_ReadByte>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

uint8 EEPROM_ReadByte (uint8 EEPROM_Address , uint8 Byte_Address)
{
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	c8 2f       	mov	r28, r24
     67c:	d6 2f       	mov	r29, r22
	uint8 Data=0;
	I2C_StartCondition();
     67e:	0e 94 c9 05 	call	0xb92	; 0xb92 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
     682:	8c 2f       	mov	r24, r28
     684:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <I2C_SlaveAddress_WriteOperation>
	I2C_WriteByte(Byte_Address);
     688:	8d 2f       	mov	r24, r29
     68a:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
	I2C_RepeatedStart();
     68e:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_RepeatedStart>
	I2C_SlaveAddress_ReadOperation(EEPROM_Address);
     692:	8c 2f       	mov	r24, r28
     694:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <I2C_SlaveAddress_ReadOperation>
	Data = I2C_ReadByte();
     698:	0e 94 11 06 	call	0xc22	; 0xc22 <I2C_ReadByte>
     69c:	c8 2f       	mov	r28, r24
	I2C_StopCondition();
     69e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <I2C_StopCondition>
	return Data;
}
     6a2:	8c 2f       	mov	r24, r28
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <EEPROM_WriteMultipleBytes>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void EEPROM_WriteMultipleBytes (uint8 *Data , uint8 Data_Size , uint8 EEPROM_Address , uint8 Byte_Address)
{
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	7c 01       	movw	r14, r24
     6b8:	16 2f       	mov	r17, r22
     6ba:	d4 2f       	mov	r29, r20
     6bc:	c2 2f       	mov	r28, r18
	uint8 Data_Cntr=0;
	I2C_StartCondition();
     6be:	0e 94 c9 05 	call	0xb92	; 0xb92 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
     6c2:	8d 2f       	mov	r24, r29
     6c4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <I2C_SlaveAddress_WriteOperation>
	I2C_WriteByte(Byte_Address);
     6c8:	8c 2f       	mov	r24, r28
     6ca:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
	while (Data_Cntr < Data_Size)
     6ce:	11 23       	and	r17, r17
     6d0:	71 f0       	breq	.+28     	; 0x6ee <EEPROM_WriteMultipleBytes+0x44>
     6d2:	e7 01       	movw	r28, r14
     6d4:	11 50       	subi	r17, 0x01	; 1
     6d6:	01 2f       	mov	r16, r17
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	0f 5f       	subi	r16, 0xFF	; 255
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	0e 0d       	add	r16, r14
     6e0:	1f 1d       	adc	r17, r15
	{
		I2C_WriteByte(Data[Data_Cntr]);
     6e2:	89 91       	ld	r24, Y+
     6e4:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
{
	uint8 Data_Cntr=0;
	I2C_StartCondition();
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
	I2C_WriteByte(Byte_Address);
	while (Data_Cntr < Data_Size)
     6e8:	c0 17       	cp	r28, r16
     6ea:	d1 07       	cpc	r29, r17
     6ec:	d1 f7       	brne	.-12     	; 0x6e2 <EEPROM_WriteMultipleBytes+0x38>
	{
		I2C_WriteByte(Data[Data_Cntr]);
		Data_Cntr++;
	}
	I2C_StopCondition();
     6ee:	0e 94 1f 06 	call	0xc3e	; 0xc3e <I2C_StopCondition>
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret

00000700 <EEPROM_ReadMultipleBytes>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
uint8* EEPROM_ReadMultipleBytes (uint8 EEPROM_Address , uint8 Byte_Address)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	c8 2f       	mov	r28, r24
     70a:	d6 2f       	mov	r29, r22
	uint8 Data_Cntr=0;
	static uint8 Data[Read_Data_Size]={0};
	I2C_StartCondition();
     70c:	0e 94 c9 05 	call	0xb92	; 0xb92 <I2C_StartCondition>
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
     710:	8c 2f       	mov	r24, r28
     712:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <I2C_SlaveAddress_WriteOperation>
	I2C_WriteByte(Byte_Address);
     716:	8d 2f       	mov	r24, r29
     718:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_WriteByte>
	I2C_RepeatedStart();
     71c:	0e 94 d6 05 	call	0xbac	; 0xbac <I2C_RepeatedStart>
	I2C_SlaveAddress_ReadOperation(EEPROM_Address);
     720:	8c 2f       	mov	r24, r28
     722:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <I2C_SlaveAddress_ReadOperation>
     726:	ca e4       	ldi	r28, 0x4A	; 74
     728:	d1 e0       	ldi	r29, 0x01	; 1
     72a:	0e e4       	ldi	r16, 0x4E	; 78
     72c:	11 e0       	ldi	r17, 0x01	; 1
	while (Data_Cntr < Read_Data_Size)
	{
		Data[Data_Cntr]=I2C_ReadByte();
     72e:	0e 94 11 06 	call	0xc22	; 0xc22 <I2C_ReadByte>
     732:	89 93       	st	Y+, r24
	I2C_StartCondition();
	I2C_SlaveAddress_WriteOperation(EEPROM_Address);
	I2C_WriteByte(Byte_Address);
	I2C_RepeatedStart();
	I2C_SlaveAddress_ReadOperation(EEPROM_Address);
	while (Data_Cntr < Read_Data_Size)
     734:	c0 17       	cp	r28, r16
     736:	d1 07       	cpc	r29, r17
     738:	d1 f7       	brne	.-12     	; 0x72e <EEPROM_ReadMultipleBytes+0x2e>
	{
		Data[Data_Cntr]=I2C_ReadByte();
		Data_Cntr++;
	}
	I2C_StopCondition();
     73a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <I2C_StopCondition>
	return Data;
}
     73e:	8a e4       	ldi	r24, 0x4A	; 74
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <LCD_WriteCommand>:
			 LCD_WriteChar(((temp%10)+48));
			 temp /= 10;
		 }
	 }
	 _delay_ms(5);
}
     74c:	cf 93       	push	r28
     74e:	c8 2f       	mov	r28, r24
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     760:	c4 fb       	bst	r28, 4
     762:	66 27       	eor	r22, r22
     764:	60 f9       	bld	r22, 0
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     76c:	c5 fb       	bst	r28, 5
     76e:	66 27       	eor	r22, r22
     770:	60 f9       	bld	r22, 0
     772:	84 e0       	ldi	r24, 0x04	; 4
     774:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     778:	c6 fb       	bst	r28, 6
     77a:	66 27       	eor	r22, r22
     77c:	60 f9       	bld	r22, 0
     77e:	85 e0       	ldi	r24, 0x05	; 5
     780:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     784:	6c 2f       	mov	r22, r28
     786:	66 1f       	adc	r22, r22
     788:	66 27       	eor	r22, r22
     78a:	66 1f       	adc	r22, r22
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     79a:	8f e9       	ldi	r24, 0x9F	; 159
     79c:	9f e0       	ldi	r25, 0x0F	; 15
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <LCD_WriteCommand+0x52>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <LCD_WriteCommand+0x58>
     7a4:	00 00       	nop
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7ae:	6c 2f       	mov	r22, r28
     7b0:	61 70       	andi	r22, 0x01	; 1
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7b8:	c1 fb       	bst	r28, 1
     7ba:	66 27       	eor	r22, r22
     7bc:	60 f9       	bld	r22, 0
     7be:	84 e0       	ldi	r24, 0x04	; 4
     7c0:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7c4:	c2 fb       	bst	r28, 2
     7c6:	66 27       	eor	r22, r22
     7c8:	60 f9       	bld	r22, 0
     7ca:	85 e0       	ldi	r24, 0x05	; 5
     7cc:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7d0:	c3 fb       	bst	r28, 3
     7d2:	66 27       	eor	r22, r22
     7d4:	60 f9       	bld	r22, 0
     7d6:	86 e0       	ldi	r24, 0x06	; 6
     7d8:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	82 e0       	ldi	r24, 0x02	; 2
     7e0:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7e4:	8f e9       	ldi	r24, 0x9F	; 159
     7e6:	9f e0       	ldi	r25, 0x0F	; 15
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <LCD_WriteCommand+0x9c>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <LCD_WriteCommand+0xa2>
     7ee:	00 00       	nop
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     7f8:	8f e1       	ldi	r24, 0x1F	; 31
     7fa:	9e e4       	ldi	r25, 0x4E	; 78
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <LCD_WriteCommand+0xb0>
     800:	00 c0       	rjmp	.+0      	; 0x802 <LCD_WriteCommand+0xb6>
     802:	00 00       	nop
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <LCD_Init>:
     808:	83 e3       	ldi	r24, 0x33	; 51
     80a:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     80e:	82 e3       	ldi	r24, 0x32	; 50
     810:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     814:	88 e2       	ldi	r24, 0x28	; 40
     816:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     820:	86 e0       	ldi	r24, 0x06	; 6
     822:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     832:	8f e1       	ldi	r24, 0x1F	; 31
     834:	9e e4       	ldi	r25, 0x4E	; 78
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_Init+0x2e>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_Init+0x34>
     83c:	00 00       	nop
     83e:	08 95       	ret

00000840 <LCD_WriteChar>:
     840:	cf 93       	push	r28
     842:	c8 2f       	mov	r28, r24
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     854:	c4 fb       	bst	r28, 4
     856:	66 27       	eor	r22, r22
     858:	60 f9       	bld	r22, 0
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     860:	c5 fb       	bst	r28, 5
     862:	66 27       	eor	r22, r22
     864:	60 f9       	bld	r22, 0
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     86c:	c6 fb       	bst	r28, 6
     86e:	66 27       	eor	r22, r22
     870:	60 f9       	bld	r22, 0
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     878:	6c 2f       	mov	r22, r28
     87a:	66 1f       	adc	r22, r22
     87c:	66 27       	eor	r22, r22
     87e:	66 1f       	adc	r22, r22
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     88e:	8f e9       	ldi	r24, 0x9F	; 159
     890:	9f e0       	ldi	r25, 0x0F	; 15
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <__stack+0x33>
     896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
     898:	00 00       	nop
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8a2:	6c 2f       	mov	r22, r28
     8a4:	61 70       	andi	r22, 0x01	; 1
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8ac:	c1 fb       	bst	r28, 1
     8ae:	66 27       	eor	r22, r22
     8b0:	60 f9       	bld	r22, 0
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8b8:	c2 fb       	bst	r28, 2
     8ba:	66 27       	eor	r22, r22
     8bc:	60 f9       	bld	r22, 0
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8c4:	c3 fb       	bst	r28, 3
     8c6:	66 27       	eor	r22, r22
     8c8:	60 f9       	bld	r22, 0
     8ca:	86 e0       	ldi	r24, 0x06	; 6
     8cc:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8d8:	8f e9       	ldi	r24, 0x9F	; 159
     8da:	9f e0       	ldi	r25, 0x0F	; 15
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <__stack+0x7d>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <__stack+0x83>
     8e2:	00 00       	nop
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     8ec:	8f e1       	ldi	r24, 0x1F	; 31
     8ee:	9e e4       	ldi	r25, 0x4E	; 78
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
     8f6:	00 00       	nop
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <LCD_WriteString>:
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	88 23       	and	r24, r24
     908:	59 f0       	breq	.+22     	; 0x920 <LCD_WriteString+0x24>
     90a:	8f 01       	movw	r16, r30
     90c:	c0 e0       	ldi	r28, 0x00	; 0
     90e:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
     912:	cf 5f       	subi	r28, 0xFF	; 255
     914:	f8 01       	movw	r30, r16
     916:	ec 0f       	add	r30, r28
     918:	f1 1d       	adc	r31, r1
     91a:	80 81       	ld	r24, Z
     91c:	81 11       	cpse	r24, r1
     91e:	f7 cf       	rjmp	.-18     	; 0x90e <LCD_WriteString+0x12>
     920:	8f e1       	ldi	r24, 0x1F	; 31
     922:	9e e4       	ldi	r25, 0x4E	; 78
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <LCD_WriteString+0x28>
     928:	00 c0       	rjmp	.+0      	; 0x92a <LCD_WriteString+0x2e>
     92a:	00 00       	nop
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	08 95       	ret

00000934 <LCD_GoTo>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_GoTo(uint8 Row, uint8 Column)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	00 d0       	rcall	.+0      	; 0x93a <LCD_GoTo+0x6>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	uint8 LCD_Loc[2]={0X80 , 0XC0};	
     93e:	90 e8       	ldi	r25, 0x80	; 128
     940:	99 83       	std	Y+1, r25	; 0x01
     942:	90 ec       	ldi	r25, 0xC0	; 192
     944:	9a 83       	std	Y+2, r25	; 0x02
	LCD_WriteCommand(LCD_Loc[Row] + Column);
     946:	fe 01       	movw	r30, r28
     948:	e8 0f       	add	r30, r24
     94a:	f1 1d       	adc	r31, r1
     94c:	81 81       	ldd	r24, Z+1	; 0x01
     94e:	86 0f       	add	r24, r22
     950:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     954:	8f e1       	ldi	r24, 0x1F	; 31
     956:	9e e4       	ldi	r25, 0x4E	; 78
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <LCD_GoTo+0x24>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <LCD_GoTo+0x2a>
     95e:	00 00       	nop
	_delay_ms(5);
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <LCD_Clear>:
*                                    E_NOT_OK
*******************************************************************************/
void LCD_Clear(void)
{
	//command to clear LCD
	LCD_WriteCommand(0X01);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     970:	8f e1       	ldi	r24, 0x1F	; 31
     972:	9e e4       	ldi	r25, 0x4E	; 78
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <LCD_Clear+0xa>
     978:	00 c0       	rjmp	.+0      	; 0x97a <LCD_Clear+0x10>
     97a:	00 00       	nop
     97c:	08 95       	ret

0000097e <LCD_WriteCustomCharacter>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/

void LCD_WriteCustomCharacter (void)
{
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
     98a:	80 e4       	ldi	r24, 0x40	; 64
     98c:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_WriteCommand>
     990:	c2 e8       	ldi	r28, 0x82	; 130
     992:	d0 e0       	ldi	r29, 0x00	; 0
     994:	0f 2e       	mov	r0, r31
     996:	f2 ec       	ldi	r31, 0xC2	; 194
     998:	ef 2e       	mov	r14, r31
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ff 2e       	mov	r15, r31
     99e:	f0 2d       	mov	r31, r0
     9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <LCD_WriteCustomCharacter+0x38>
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
	{
		for(Custom_Char_Col_Loc=0 ; Custom_Char_Col_Loc < 8 ; Custom_Char_Col_Loc++)
		{
			LCD_WriteChar(LCD_CUSTOM_CHARACTERS_g[Custom_Char_Row_Loc][Custom_Char_Col_Loc]);
     9a2:	89 91       	ld	r24, Y+
     9a4:	0e 94 20 04 	call	0x840	; 0x840 <LCD_WriteChar>
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
	{
		for(Custom_Char_Col_Loc=0 ; Custom_Char_Col_Loc < 8 ; Custom_Char_Col_Loc++)
     9a8:	c0 17       	cp	r28, r16
     9aa:	d1 07       	cpc	r29, r17
     9ac:	d1 f7       	brne	.-12     	; 0x9a2 <LCD_WriteCustomCharacter+0x24>
     9ae:	e8 01       	movw	r28, r16
void LCD_WriteCustomCharacter (void)
{
	uint8 Custom_Char_Row_Loc = 0;
	uint8 Custom_Char_Col_Loc = 0;
	LCD_WriteCommand(0X40);
	for (Custom_Char_Row_Loc=0 ; Custom_Char_Row_Loc < 8 ; Custom_Char_Row_Loc++)
     9b0:	e0 16       	cp	r14, r16
     9b2:	f1 06       	cpc	r15, r17
     9b4:	21 f0       	breq	.+8      	; 0x9be <LCD_WriteCustomCharacter+0x40>
     9b6:	8e 01       	movw	r16, r28
     9b8:	08 5f       	subi	r16, 0xF8	; 248
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	f2 cf       	rjmp	.-28     	; 0x9a2 <LCD_WriteCustomCharacter+0x24>
     9be:	8f e1       	ldi	r24, 0x1F	; 31
     9c0:	9e e4       	ldi	r25, 0x4E	; 78
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <LCD_WriteCustomCharacter+0x44>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <LCD_WriteCustomCharacter+0x4a>
     9c8:	00 00       	nop
		{
			LCD_WriteChar(LCD_CUSTOM_CHARACTERS_g[Custom_Char_Row_Loc][Custom_Char_Col_Loc]);
		}
	}
	_delay_ms(5);
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	08 95       	ret

000009d8 <LED_ON>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_HIGH);
	#elif (SELECTED_LED == GREEN_LED)
	DIO_WriteChannel(PORTC_PIN1 , PIN_HIGH);
	#elif (SELECTED_LED == BLUE_LED)
	DIO_WriteChannel(PORTC_PIN2 , PIN_HIGH);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	82 e1       	ldi	r24, 0x12	; 18
     9dc:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     9e0:	08 95       	ret

000009e2 <LED_OFF>:
	#if (SELECTED_LED == RED_LED)
	DIO_WriteChannel(PORTC_PIN0 , PIN_LOW);
	#elif (SELECTED_LED == GREEN_LED) 
	DIO_WriteChannel(PORTC_PIN1 , PIN_LOW);
	#elif (SELECTED_LED == BLUE_LED)  
	DIO_WriteChannel(PORTC_PIN2 , PIN_LOW);
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	82 e1       	ldi	r24, 0x12	; 18
     9e6:	0e 94 24 05 	call	0xa48	; 0xa48 <DIO_WriteChannel>
     9ea:	08 95       	ret

000009ec <ServoMotor_Init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void ServoMotor_Init (void)
{
	PWM_Init();
     9ec:	0e 94 05 08 	call	0x100a	; 0x100a <PWM_Init>
     9f0:	08 95       	ret

000009f2 <ServoMotor_SetAngle18>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void ServoMotor_SetAngle18 (uint8 Angle)
{
	switch (Angle)
     9f2:	86 33       	cpi	r24, 0x36	; 54
     9f4:	a9 f0       	breq	.+42     	; 0xa20 <ServoMotor_SetAngle18+0x2e>
     9f6:	28 f4       	brcc	.+10     	; 0xa02 <ServoMotor_SetAngle18+0x10>
     9f8:	82 31       	cpi	r24, 0x12	; 18
     9fa:	41 f0       	breq	.+16     	; 0xa0c <ServoMotor_SetAngle18+0x1a>
     9fc:	84 32       	cpi	r24, 0x24	; 36
     9fe:	59 f0       	breq	.+22     	; 0xa16 <ServoMotor_SetAngle18+0x24>
     a00:	08 95       	ret
     a02:	88 34       	cpi	r24, 0x48	; 72
     a04:	91 f0       	breq	.+36     	; 0xa2a <ServoMotor_SetAngle18+0x38>
     a06:	8a 35       	cpi	r24, 0x5A	; 90
     a08:	a9 f0       	breq	.+42     	; 0xa34 <ServoMotor_SetAngle18+0x42>
     a0a:	08 95       	ret
	{
		case 18:
		PWM1_Generate(50 , 6);
     a0c:	66 e0       	ldi	r22, 0x06	; 6
     a0e:	82 e3       	ldi	r24, 0x32	; 50
     a10:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
		break;
     a14:	08 95       	ret
		case 36:
		PWM1_Generate(50 , 7);
     a16:	67 e0       	ldi	r22, 0x07	; 7
     a18:	82 e3       	ldi	r24, 0x32	; 50
     a1a:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
		break;
     a1e:	08 95       	ret
		case 54:
		PWM1_Generate(50 , 8);
     a20:	68 e0       	ldi	r22, 0x08	; 8
     a22:	82 e3       	ldi	r24, 0x32	; 50
     a24:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
		break;
     a28:	08 95       	ret
		case 72:
		PWM1_Generate(50 , 9);
     a2a:	69 e0       	ldi	r22, 0x09	; 9
     a2c:	82 e3       	ldi	r24, 0x32	; 50
     a2e:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
		break;
     a32:	08 95       	ret
		case 90:
		PWM1_Generate(50 , 10);
     a34:	6a e0       	ldi	r22, 0x0A	; 10
     a36:	82 e3       	ldi	r24, 0x32	; 50
     a38:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
     a3c:	08 95       	ret

00000a3e <ServoMotor_Home>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void ServoMotor_Home (void)
{
	PWM1_Generate(50 , 5);
     a3e:	65 e0       	ldi	r22, 0x05	; 5
     a40:	82 e3       	ldi	r24, 0x32	; 50
     a42:	0e 94 0f 08 	call	0x101e	; 0x101e <PWM1_Generate>
     a46:	08 95       	ret

00000a48 <DIO_WriteChannel>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_WriteChannel (uint8 Pin_Order, PIN_VAL_e Pin_Val)
{
	uint8 PORT =0, PIN=0 ;
	PORT= Pin_Order / NUMBER_OF_PORT_PINS;
     a48:	98 2f       	mov	r25, r24
     a4a:	96 95       	lsr	r25
     a4c:	96 95       	lsr	r25
     a4e:	96 95       	lsr	r25
	PIN=  Pin_Order  % NUMBER_OF_PORT_PINS;
     a50:	87 70       	andi	r24, 0x07	; 7
	
	switch (Pin_Val)
     a52:	66 23       	and	r22, r22
     a54:	09 f4       	brne	.+2      	; 0xa58 <DIO_WriteChannel+0x10>
     a56:	3f c0       	rjmp	.+126    	; 0xad6 <DIO_WriteChannel+0x8e>
     a58:	61 30       	cpi	r22, 0x01	; 1
     a5a:	09 f0       	breq	.+2      	; 0xa5e <DIO_WriteChannel+0x16>
     a5c:	7b c0       	rjmp	.+246    	; 0xb54 <DIO_WriteChannel+0x10c>
	{
		case PIN_HIGH :
		switch(PORT)
     a5e:	91 30       	cpi	r25, 0x01	; 1
     a60:	99 f0       	breq	.+38     	; 0xa88 <DIO_WriteChannel+0x40>
     a62:	28 f0       	brcs	.+10     	; 0xa6e <DIO_WriteChannel+0x26>
     a64:	92 30       	cpi	r25, 0x02	; 2
     a66:	e9 f0       	breq	.+58     	; 0xaa2 <DIO_WriteChannel+0x5a>
     a68:	93 30       	cpi	r25, 0x03	; 3
     a6a:	41 f1       	breq	.+80     	; 0xabc <DIO_WriteChannel+0x74>
     a6c:	08 95       	ret
		{
			case 0:
			SET_BIT (PORTA , PIN);
     a6e:	4b b3       	in	r20, 0x1b	; 27
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	b9 01       	movw	r22, r18
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_WriteChannel+0x34>
     a78:	66 0f       	add	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	8a 95       	dec	r24
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_WriteChannel+0x30>
     a80:	cb 01       	movw	r24, r22
     a82:	84 2b       	or	r24, r20
     a84:	8b bb       	out	0x1b, r24	; 27
			break;
     a86:	08 95       	ret
			case 1:
			SET_BIT (PORTB , PIN);
     a88:	48 b3       	in	r20, 0x18	; 24
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	b9 01       	movw	r22, r18
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_WriteChannel+0x4e>
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	8a 95       	dec	r24
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_WriteChannel+0x4a>
     a9a:	cb 01       	movw	r24, r22
     a9c:	84 2b       	or	r24, r20
     a9e:	88 bb       	out	0x18, r24	; 24
			break;
     aa0:	08 95       	ret
			case 2:
			SET_BIT (PORTC , PIN);
     aa2:	45 b3       	in	r20, 0x15	; 21
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	b9 01       	movw	r22, r18
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_WriteChannel+0x68>
     aac:	66 0f       	add	r22, r22
     aae:	77 1f       	adc	r23, r23
     ab0:	8a 95       	dec	r24
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_WriteChannel+0x64>
     ab4:	cb 01       	movw	r24, r22
     ab6:	84 2b       	or	r24, r20
     ab8:	85 bb       	out	0x15, r24	; 21
			break;
     aba:	08 95       	ret
			case 3:
			SET_BIT (PORTD , PIN);
     abc:	42 b3       	in	r20, 0x12	; 18
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	b9 01       	movw	r22, r18
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <DIO_WriteChannel+0x82>
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	8a 95       	dec	r24
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <DIO_WriteChannel+0x7e>
     ace:	cb 01       	movw	r24, r22
     ad0:	84 2b       	or	r24, r20
     ad2:	82 bb       	out	0x12, r24	; 18
			break;
     ad4:	08 95       	ret
			break;
		}
		break;
		
		case PIN_LOW :
		switch(PORT)
     ad6:	91 30       	cpi	r25, 0x01	; 1
     ad8:	a1 f0       	breq	.+40     	; 0xb02 <DIO_WriteChannel+0xba>
     ada:	28 f0       	brcs	.+10     	; 0xae6 <DIO_WriteChannel+0x9e>
     adc:	92 30       	cpi	r25, 0x02	; 2
     ade:	f9 f0       	breq	.+62     	; 0xb1e <DIO_WriteChannel+0xd6>
     ae0:	93 30       	cpi	r25, 0x03	; 3
     ae2:	59 f1       	breq	.+86     	; 0xb3a <DIO_WriteChannel+0xf2>
     ae4:	08 95       	ret
		{
			case 0:
			CLR_BIT (PORTA , PIN);
     ae6:	4b b3       	in	r20, 0x1b	; 27
     ae8:	21 e0       	ldi	r18, 0x01	; 1
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	b9 01       	movw	r22, r18
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_WriteChannel+0xac>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	8a 95       	dec	r24
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_WriteChannel+0xa8>
     af8:	cb 01       	movw	r24, r22
     afa:	80 95       	com	r24
     afc:	84 23       	and	r24, r20
     afe:	8b bb       	out	0x1b, r24	; 27
			break;
     b00:	08 95       	ret
			case 1:
			CLR_BIT (PORTB , PIN);
     b02:	48 b3       	in	r20, 0x18	; 24
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	b9 01       	movw	r22, r18
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <DIO_WriteChannel+0xc8>
     b0c:	66 0f       	add	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	8a 95       	dec	r24
     b12:	e2 f7       	brpl	.-8      	; 0xb0c <DIO_WriteChannel+0xc4>
     b14:	cb 01       	movw	r24, r22
     b16:	80 95       	com	r24
     b18:	84 23       	and	r24, r20
     b1a:	88 bb       	out	0x18, r24	; 24
			break;
     b1c:	08 95       	ret
			case 2:
			CLR_BIT (PORTC , PIN);
     b1e:	45 b3       	in	r20, 0x15	; 21
     b20:	21 e0       	ldi	r18, 0x01	; 1
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	b9 01       	movw	r22, r18
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_WriteChannel+0xe4>
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	8a 95       	dec	r24
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_WriteChannel+0xe0>
     b30:	cb 01       	movw	r24, r22
     b32:	80 95       	com	r24
     b34:	84 23       	and	r24, r20
     b36:	85 bb       	out	0x15, r24	; 21
			break;
     b38:	08 95       	ret
			case 3:
			CLR_BIT (PORTD , PIN);
     b3a:	42 b3       	in	r20, 0x12	; 18
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	b9 01       	movw	r22, r18
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_WriteChannel+0x100>
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	8a 95       	dec	r24
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_WriteChannel+0xfc>
     b4c:	cb 01       	movw	r24, r22
     b4e:	80 95       	com	r24
     b50:	84 23       	and	r24, r20
     b52:	82 bb       	out	0x12, r24	; 18
     b54:	08 95       	ret

00000b56 <GPT_Init>:
	  #endif // #if (TIMER0_PRESCALE == TIMER_CLK_SRC_NO_PRESCALING) 
	#endif //#if (TIMER0_STATE == TIMER_ENABLE)
	
	#if (TIMER1_STATE == TIMER_ENABLE)
	  #if (TIMER1_MODE == NORMAL_MODE)
	  CLR_BIT (TCCR1A , 0);
     b56:	8f b5       	in	r24, 0x2f	; 47
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8f bd       	out	0x2f, r24	; 47
	  CLR_BIT (TCCR1A , 1);
     b5c:	8f b5       	in	r24, 0x2f	; 47
     b5e:	8d 7f       	andi	r24, 0xFD	; 253
     b60:	8f bd       	out	0x2f, r24	; 47
	  CLR_BIT (TCCR1B , 3);
     b62:	8e b5       	in	r24, 0x2e	; 46
     b64:	87 7f       	andi	r24, 0xF7	; 247
     b66:	8e bd       	out	0x2e, r24	; 46
	  CLR_BIT (TCCR1B , 4);
     b68:	8e b5       	in	r24, 0x2e	; 46
     b6a:	8f 7e       	andi	r24, 0xEF	; 239
     b6c:	8e bd       	out	0x2e, r24	; 46
	    #if (TIMER1_INTERRUPT_STATE == TIMER_INTERRUPT_ENABLE)
	    SET_BIT (TIMSK , 2);
     b6e:	89 b7       	in	r24, 0x39	; 57
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	89 bf       	out	0x39, r24	; 57
	#elif (TIMER1_PRESCALE == TIMER_CLK_SRC_PRESCALING_64)
	TCCR1B |= 0X03;
	#elif (TIMER1_PRESCALE == TIMER_CLK_SRC_PRESCALING_256)
	TCCR1B |= 0X04;
	#elif (TIMER1_PRESCALE == TIMER_CLK_SRC_PRESCALING_1024)
	TCCR1B |= 0X05;
     b74:	8e b5       	in	r24, 0x2e	; 46
     b76:	85 60       	ori	r24, 0x05	; 5
     b78:	8e bd       	out	0x2e, r24	; 46
     b7a:	08 95       	ret

00000b7c <I2C_MasterInit>:
	// Set Address for the Slave
	TWAR = 0X02 << 1;
	//ENABLE ACK FOR Slave
	SET_BIT (TWCR,6);
	//ENABLE I2C
	SET_BIT (TWCR,2);
     b7c:	80 e2       	ldi	r24, 0x20	; 32
     b7e:	80 b9       	out	0x00, r24	; 0
     b80:	08 98       	cbi	0x01, 0	; 1
     b82:	09 98       	cbi	0x01, 1	; 1
     b84:	86 b7       	in	r24, 0x36	; 54
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	86 bf       	out	0x36, r24	; 54
     b8a:	86 b7       	in	r24, 0x36	; 54
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	86 bf       	out	0x36, r24	; 54
     b90:	08 95       	ret

00000b92 <I2C_StartCondition>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_StartCondition(void)
{
	// GENERATE Start condition 
	SET_BIT(TWCR ,5);
     b92:	86 b7       	in	r24, 0x36	; 54
     b94:	80 62       	ori	r24, 0x20	; 32
     b96:	86 bf       	out	0x36, r24	; 54
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84; //                             <----
     b98:	84 e8       	ldi	r24, 0x84	; 132
     b9a:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG 
	while (GET_BIT(TWCR , 7)==0);
     b9c:	06 b6       	in	r0, 0x36	; 54
     b9e:	07 fe       	sbrs	r0, 7
     ba0:	fd cf       	rjmp	.-6      	; 0xb9c <I2C_StartCondition+0xa>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != START_COND);
     ba2:	81 b1       	in	r24, 0x01	; 1
     ba4:	88 7f       	andi	r24, 0xF8	; 248
     ba6:	88 30       	cpi	r24, 0x08	; 8
     ba8:	e1 f7       	brne	.-8      	; 0xba2 <I2C_StartCondition+0x10>
}
     baa:	08 95       	ret

00000bac <I2C_RepeatedStart>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_RepeatedStart(void)
{
	// GENERATE Start condition
	SET_BIT(TWCR ,5);
     bac:	86 b7       	in	r24, 0x36	; 54
     bae:	80 62       	ori	r24, 0x20	; 32
     bb0:	86 bf       	out	0x36, r24	; 54
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR |= 0X84;   // ask why here there's | in here , and in start there's no |   <-----
     bb2:	86 b7       	in	r24, 0x36	; 54
     bb4:	84 68       	ori	r24, 0x84	; 132
     bb6:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
     bb8:	06 b6       	in	r0, 0x36	; 54
     bba:	07 fe       	sbrs	r0, 7
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <I2C_RepeatedStart+0xc>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != REP_START_COND);
     bbe:	81 b1       	in	r24, 0x01	; 1
     bc0:	88 7f       	andi	r24, 0xF8	; 248
     bc2:	80 31       	cpi	r24, 0x10	; 16
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <I2C_RepeatedStart+0x12>
}
     bc6:	08 95       	ret

00000bc8 <I2C_SlaveAddress_WriteOperation>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_SlaveAddress_WriteOperation(uint8 Address)
{
	//Send Slave Address with Write Operation
	TWDR = (Address << 1);
     bc8:	88 0f       	add	r24, r24
     bca:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
     bcc:	84 e8       	ldi	r24, 0x84	; 132
     bce:	86 bf       	out	0x36, r24	; 54
	SET_BIT (TWCR , 6);
     bd0:	86 b7       	in	r24, 0x36	; 54
     bd2:	80 64       	ori	r24, 0x40	; 64
     bd4:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
     bd6:	06 b6       	in	r0, 0x36	; 54
     bd8:	07 fe       	sbrs	r0, 7
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <I2C_SlaveAddress_WriteOperation+0xe>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_SEND_SLAVE_ADD_AND_WR_OP_ACK_RECEIVED);
     bdc:	81 b1       	in	r24, 0x01	; 1
     bde:	88 7f       	andi	r24, 0xF8	; 248
     be0:	88 31       	cpi	r24, 0x18	; 24
     be2:	e1 f7       	brne	.-8      	; 0xbdc <I2C_SlaveAddress_WriteOperation+0x14>
}
     be4:	08 95       	ret

00000be6 <I2C_SlaveAddress_ReadOperation>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_SlaveAddress_ReadOperation(uint8 Address)
{
	//Send Slave Address with READ Operation
	TWDR = (Address << 1) | (0X01);
     be6:	88 0f       	add	r24, r24
     be8:	81 60       	ori	r24, 0x01	; 1
     bea:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
     bec:	84 e8       	ldi	r24, 0x84	; 132
     bee:	86 bf       	out	0x36, r24	; 54
	SET_BIT (TWCR , 6);
     bf0:	86 b7       	in	r24, 0x36	; 54
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
     bf6:	06 b6       	in	r0, 0x36	; 54
     bf8:	07 fe       	sbrs	r0, 7
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <I2C_SlaveAddress_ReadOperation+0x10>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_SEND_SLAVE_ADD_AND_RD_OP_ACK_RECEIVED);
     bfc:	81 b1       	in	r24, 0x01	; 1
     bfe:	88 7f       	andi	r24, 0xF8	; 248
     c00:	80 34       	cpi	r24, 0x40	; 64
     c02:	e1 f7       	brne	.-8      	; 0xbfc <I2C_SlaveAddress_ReadOperation+0x16>
}
     c04:	08 95       	ret

00000c06 <I2C_WriteByte>:
*                                    E_NOT_OK
*******************************************************************************/
void I2C_WriteByte(uint8 Data)
{
	// Send Byte of Data
	TWDR = Data;
     c06:	83 b9       	out	0x03, r24	; 3
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
     c08:	84 e8       	ldi	r24, 0x84	; 132
     c0a:	86 bf       	out	0x36, r24	; 54
	SET_BIT (TWCR , 6);
     c0c:	86 b7       	in	r24, 0x36	; 54
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
     c12:	06 b6       	in	r0, 0x36	; 54
     c14:	07 fe       	sbrs	r0, 7
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <I2C_WriteByte+0xc>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_WR_BYTE_ACK_RECEIVED);
     c18:	81 b1       	in	r24, 0x01	; 1
     c1a:	88 7f       	andi	r24, 0xF8	; 248
     c1c:	88 32       	cpi	r24, 0x28	; 40
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <I2C_WriteByte+0x12>
}
     c20:	08 95       	ret

00000c22 <I2C_ReadByte>:
uint8 I2C_ReadByte(void)
{
	uint8 Data=0;
	
	//TRIGGER THE FLAG we also enabled I2C one more time which is not necessary (4) 
	TWCR = 0X84;
     c22:	84 e8       	ldi	r24, 0x84	; 132
     c24:	86 bf       	out	0x36, r24	; 54
	SET_BIT (TWCR , 6);
     c26:	86 b7       	in	r24, 0x36	; 54
     c28:	80 64       	ori	r24, 0x40	; 64
     c2a:	86 bf       	out	0x36, r24	; 54
	// POLLING ON THE FLAG
	while (GET_BIT(TWCR , 7)==0);
     c2c:	06 b6       	in	r0, 0x36	; 54
     c2e:	07 fe       	sbrs	r0, 7
     c30:	fd cf       	rjmp	.-6      	; 0xc2c <I2C_ReadByte+0xa>
	//CHECK ON THE STATUS
	while ((TWSR & 0XF8) != MR_RD_BYTE_WITH_ACK_SENT);
     c32:	81 b1       	in	r24, 0x01	; 1
     c34:	88 7f       	andi	r24, 0xF8	; 248
     c36:	80 35       	cpi	r24, 0x50	; 80
     c38:	e1 f7       	brne	.-8      	; 0xc32 <I2C_ReadByte+0x10>
	
	//Load the Data on the Register
	Data = TWDR;
     c3a:	83 b1       	in	r24, 0x03	; 3
	return Data;
}
     c3c:	08 95       	ret

00000c3e <I2C_StopCondition>:
*******************************************************************************/
void I2C_StopCondition(void)
{
	//Stop Condition
	//TRIGGER THE FLAG
	TWCR = 0X94;
     c3e:	84 e9       	ldi	r24, 0x94	; 148
     c40:	86 bf       	out	0x36, r24	; 54
     c42:	08 95       	ret

00000c44 <IRQH_SetGlobalInterrupts>:
*                                    E_NOT_OK
*******************************************************************************/

void IRQH_SetCallBackGPT (void(*p1)(void))
{
	GPT_ptr = p1;
     c44:	88 23       	and	r24, r24
     c46:	31 f0       	breq	.+12     	; 0xc54 <IRQH_SetGlobalInterrupts+0x10>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <IRQH_SetGlobalInterrupts+0x16>
     c4c:	8f b7       	in	r24, 0x3f	; 63
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	8f bf       	out	0x3f, r24	; 63
     c52:	08 95       	ret
     c54:	8f b7       	in	r24, 0x3f	; 63
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	8f bf       	out	0x3f, r24	; 63
     c5a:	08 95       	ret

00000c5c <IRQH_SetCallBackUART>:
}

void IRQH_SetCallBackUART (void(*p2)(void))
{
	RX_ptr = p2;
     c5c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <RX_ptr+0x1>
     c60:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <RX_ptr>
     c64:	08 95       	ret

00000c66 <__vector_1>:
						  {
							  ADC_Vin_Value_mv = ((ADC_INPUT_16BIT_ACCESS* 5000) / 1024);
						  }
*/
ISR(INT0_vect)
{
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
	(*ptr)();
     c88:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <ptr>
     c8c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <ptr+0x1>
     c90:	09 95       	icall
}
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_11>:
{
	ADC_Vin_Value_mv = ((ADC_INPUT_16BIT_ACCESS* 5000) / 1024); 
}*/

ISR(TIMER0_OVF_vect)
{
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
	static uint32 TIMER0_OVF_CNTR =0;
	TIMER0_OVF_CNTR++;
     cd6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TIMER0_OVF_CNTR.1680>
     cda:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TIMER0_OVF_CNTR.1680+0x1>
     cde:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <TIMER0_OVF_CNTR.1680+0x2>
     ce2:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <TIMER0_OVF_CNTR.1680+0x3>
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	a1 1d       	adc	r26, r1
     cea:	b1 1d       	adc	r27, r1
     cec:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TIMER0_OVF_CNTR.1680>
     cf0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <TIMER0_OVF_CNTR.1680+0x1>
     cf4:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <TIMER0_OVF_CNTR.1680+0x2>
     cf8:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <TIMER0_OVF_CNTR.1680+0x3>
	if(TIMER0_OVF_CNTR == TIMER0Number_OVF_Flags_g)
     cfc:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <TIMER0Number_OVF_Flags_g>
     d00:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <TIMER0Number_OVF_Flags_g+0x1>
     d04:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <TIMER0Number_OVF_Flags_g+0x2>
     d08:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <TIMER0Number_OVF_Flags_g+0x3>
     d0c:	84 17       	cp	r24, r20
     d0e:	95 07       	cpc	r25, r21
     d10:	a6 07       	cpc	r26, r22
     d12:	b7 07       	cpc	r27, r23
     d14:	81 f4       	brne	.+32     	; 0xd36 <__vector_11+0x82>
	{
		(*GPT_ptr)();
     d16:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <GPT_ptr>
     d1a:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <GPT_ptr+0x1>
     d1e:	09 95       	icall
		TIMER0_OVF_CNTR=0;
     d20:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <TIMER0_OVF_CNTR.1680>
     d24:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <TIMER0_OVF_CNTR.1680+0x1>
     d28:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <TIMER0_OVF_CNTR.1680+0x2>
     d2c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <TIMER0_OVF_CNTR.1680+0x3>
		TCNT0 = TIMER0Init_Value_g;
     d30:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <TIMER0Init_Value_g>
     d34:	82 bf       	out	0x32, r24	; 50
	}
}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
	static uint32 TIMER0_CmprMatch_CNTR =0;
	TIMER0_CmprMatch_CNTR++;
     d7a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TIMER0_CmprMatch_CNTR.1686>
     d7e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <TIMER0_CmprMatch_CNTR.1686+0x1>
     d82:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <TIMER0_CmprMatch_CNTR.1686+0x2>
     d86:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <TIMER0_CmprMatch_CNTR.1686+0x3>
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	a1 1d       	adc	r26, r1
     d8e:	b1 1d       	adc	r27, r1
     d90:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TIMER0_CmprMatch_CNTR.1686>
     d94:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <TIMER0_CmprMatch_CNTR.1686+0x1>
     d98:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <TIMER0_CmprMatch_CNTR.1686+0x2>
     d9c:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <TIMER0_CmprMatch_CNTR.1686+0x3>
	if (TIMER0_CmprMatch_CNTR == TIMER0Number_CmprMatch_Flags_g)
     da0:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <TIMER0Number_CmprMatch_Flags_g>
     da4:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <TIMER0Number_CmprMatch_Flags_g+0x1>
     da8:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <TIMER0Number_CmprMatch_Flags_g+0x2>
     dac:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <TIMER0Number_CmprMatch_Flags_g+0x3>
     db0:	84 17       	cp	r24, r20
     db2:	95 07       	cpc	r25, r21
     db4:	a6 07       	cpc	r26, r22
     db6:	b7 07       	cpc	r27, r23
     db8:	69 f4       	brne	.+26     	; 0xdd4 <__vector_10+0x7c>
	{
		(*GPT_ptr)();
     dba:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <GPT_ptr>
     dbe:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <GPT_ptr+0x1>
     dc2:	09 95       	icall
		TIMER0_CmprMatch_CNTR=0;
     dc4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TIMER0_CmprMatch_CNTR.1686>
     dc8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <TIMER0_CmprMatch_CNTR.1686+0x1>
     dcc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <TIMER0_CmprMatch_CNTR.1686+0x2>
     dd0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <TIMER0_CmprMatch_CNTR.1686+0x3>
	}
}
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
	//(*GPT_ptr)();
	//TCNT1_16BIT_ACCESS = TIMER1Init_Value_g;    These two lines for Timer1 Normal Mode 
	TIMER1Number_OVF_Flags_g++;  // This line For ICU Usage with Ultrasonic Sensor 
     e08:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <TIMER1Number_OVF_Flags_g>
     e0c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <TIMER1Number_OVF_Flags_g+0x1>
     e10:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <TIMER1Number_OVF_Flags_g+0x2>
     e14:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <TIMER1Number_OVF_Flags_g+0x3>
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	a1 1d       	adc	r26, r1
     e1c:	b1 1d       	adc	r27, r1
     e1e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <TIMER1Number_OVF_Flags_g>
     e22:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <TIMER1Number_OVF_Flags_g+0x1>
     e26:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <TIMER1Number_OVF_Flags_g+0x2>
     e2a:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <TIMER1Number_OVF_Flags_g+0x3>
}
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	(*GPT_ptr)();
     e62:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <GPT_ptr>
     e66:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <GPT_ptr+0x1>
     e6a:	09 95       	icall
}
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_15>:
		CLR_BIT (TIMSK , 5);
	}
}*/

ISR (USART_TXC_vect)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	8f 93       	push	r24
	TX_CNTR++;
     e9a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <TX_CNTR>
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <TX_CNTR>
	TX_STATUS_FLAG =1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <TX_STATUS_FLAG>
}
     eaa:	8f 91       	pop	r24
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_13>:

ISR (USART_RXC_vect)
{
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	ef 93       	push	r30
     ed6:	ff 93       	push	r31
	(*RX_ptr)();
     ed8:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <RX_ptr>
     edc:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <RX_ptr+0x1>
     ee0:	09 95       	icall
}
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <PORT_Init>:
 */ 

#include "PORT_Core.h"

void PORT_Init(void)
{
     f04:	e0 e6       	ldi	r30, 0x60	; 96
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	4e e7       	ldi	r20, 0x7E	; 126
     f0a:	50 e0       	ldi	r21, 0x00	; 0
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
					break;
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	70 e0       	ldi	r23, 0x00	; 0
void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
	{
		PORT = PORT_Initialization[cntr].PIN_NUM/NUMBER_OF_PORT_PINS;
     f10:	80 81       	ld	r24, Z
     f12:	98 2f       	mov	r25, r24
     f14:	96 95       	lsr	r25
     f16:	96 95       	lsr	r25
     f18:	96 95       	lsr	r25
		PIN =  PORT_Initialization[cntr].PIN_NUM%NUMBER_OF_PORT_PINS;
     f1a:	87 70       	andi	r24, 0x07	; 7
		DIR =  PORT_Initialization[cntr].DIR;
		
		switch (DIR)
     f1c:	21 81       	ldd	r18, Z+1	; 0x01
     f1e:	22 23       	and	r18, r18
     f20:	19 f0       	breq	.+6      	; 0xf28 <PORT_Init+0x24>
     f22:	21 30       	cpi	r18, 0x01	; 1
     f24:	c9 f1       	breq	.+114    	; 0xf98 <PORT_Init+0x94>
     f26:	6b c0       	rjmp	.+214    	; 0xffe <PORT_Init+0xfa>
		{
			case PIN_DIR_INPUT :
			    switch (PORT)
     f28:	91 30       	cpi	r25, 0x01	; 1
     f2a:	91 f0       	breq	.+36     	; 0xf50 <PORT_Init+0x4c>
     f2c:	28 f0       	brcs	.+10     	; 0xf38 <PORT_Init+0x34>
     f2e:	92 30       	cpi	r25, 0x02	; 2
     f30:	d9 f0       	breq	.+54     	; 0xf68 <PORT_Init+0x64>
     f32:	93 30       	cpi	r25, 0x03	; 3
     f34:	29 f1       	breq	.+74     	; 0xf80 <PORT_Init+0x7c>
     f36:	63 c0       	rjmp	.+198    	; 0xffe <PORT_Init+0xfa>
				{
					case PORT_A:
					     CLR_BIT(DDRA , PIN);
     f38:	9a b3       	in	r25, 0x1a	; 26
     f3a:	9b 01       	movw	r18, r22
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <PORT_Init+0x3e>
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <PORT_Init+0x3a>
     f46:	82 2f       	mov	r24, r18
     f48:	80 95       	com	r24
     f4a:	89 23       	and	r24, r25
     f4c:	8a bb       	out	0x1a, r24	; 26
					break;
     f4e:	57 c0       	rjmp	.+174    	; 0xffe <PORT_Init+0xfa>
					
					case PORT_B:
					     CLR_BIT(DDRB , PIN);
     f50:	97 b3       	in	r25, 0x17	; 23
     f52:	9b 01       	movw	r18, r22
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <PORT_Init+0x56>
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	8a 95       	dec	r24
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <PORT_Init+0x52>
     f5e:	82 2f       	mov	r24, r18
     f60:	80 95       	com	r24
     f62:	89 23       	and	r24, r25
     f64:	87 bb       	out	0x17, r24	; 23
					break;
     f66:	4b c0       	rjmp	.+150    	; 0xffe <PORT_Init+0xfa>
					
					case PORT_C:
					     CLR_BIT(DDRC , PIN);
     f68:	94 b3       	in	r25, 0x14	; 20
     f6a:	9b 01       	movw	r18, r22
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <PORT_Init+0x6e>
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	8a 95       	dec	r24
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <PORT_Init+0x6a>
     f76:	82 2f       	mov	r24, r18
     f78:	80 95       	com	r24
     f7a:	89 23       	and	r24, r25
     f7c:	84 bb       	out	0x14, r24	; 20
					break;
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <PORT_Init+0xfa>
					
					case PORT_D:
					     CLR_BIT(DDRD , PIN);
     f80:	91 b3       	in	r25, 0x11	; 17
     f82:	9b 01       	movw	r18, r22
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <PORT_Init+0x86>
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <PORT_Init+0x82>
     f8e:	82 2f       	mov	r24, r18
     f90:	80 95       	com	r24
     f92:	89 23       	and	r24, r25
     f94:	81 bb       	out	0x11, r24	; 17
					break;
     f96:	33 c0       	rjmp	.+102    	; 0xffe <PORT_Init+0xfa>
					break;
				}
			break;
			
			case PIN_DIR_OUTPUT :
			    switch (PORT)
     f98:	91 30       	cpi	r25, 0x01	; 1
     f9a:	89 f0       	breq	.+34     	; 0xfbe <PORT_Init+0xba>
     f9c:	28 f0       	brcs	.+10     	; 0xfa8 <PORT_Init+0xa4>
     f9e:	92 30       	cpi	r25, 0x02	; 2
     fa0:	c9 f0       	breq	.+50     	; 0xfd4 <PORT_Init+0xd0>
     fa2:	93 30       	cpi	r25, 0x03	; 3
     fa4:	11 f1       	breq	.+68     	; 0xfea <PORT_Init+0xe6>
     fa6:	2b c0       	rjmp	.+86     	; 0xffe <PORT_Init+0xfa>
			    {
				    case PORT_A:
				    SET_BIT(DDRA , PIN);
     fa8:	2a b3       	in	r18, 0x1a	; 26
     faa:	db 01       	movw	r26, r22
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <PORT_Init+0xae>
     fae:	aa 0f       	add	r26, r26
     fb0:	bb 1f       	adc	r27, r27
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <PORT_Init+0xaa>
     fb6:	cd 01       	movw	r24, r26
     fb8:	82 2b       	or	r24, r18
     fba:	8a bb       	out	0x1a, r24	; 26
				    break;
     fbc:	20 c0       	rjmp	.+64     	; 0xffe <PORT_Init+0xfa>
				    
				    case PORT_B:
				    SET_BIT(DDRB , PIN);
     fbe:	27 b3       	in	r18, 0x17	; 23
     fc0:	db 01       	movw	r26, r22
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <PORT_Init+0xc4>
     fc4:	aa 0f       	add	r26, r26
     fc6:	bb 1f       	adc	r27, r27
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <PORT_Init+0xc0>
     fcc:	cd 01       	movw	r24, r26
     fce:	82 2b       	or	r24, r18
     fd0:	87 bb       	out	0x17, r24	; 23
				    break;
     fd2:	15 c0       	rjmp	.+42     	; 0xffe <PORT_Init+0xfa>
				    
				    case PORT_C:
				    SET_BIT(DDRC , PIN);
     fd4:	24 b3       	in	r18, 0x14	; 20
     fd6:	db 01       	movw	r26, r22
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <PORT_Init+0xda>
     fda:	aa 0f       	add	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <PORT_Init+0xd6>
     fe2:	cd 01       	movw	r24, r26
     fe4:	82 2b       	or	r24, r18
     fe6:	84 bb       	out	0x14, r24	; 20
				    break;
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <PORT_Init+0xfa>
				    
				    case PORT_D:
				    SET_BIT(DDRD , PIN);
     fea:	21 b3       	in	r18, 0x11	; 17
     fec:	db 01       	movw	r26, r22
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <PORT_Init+0xf0>
     ff0:	aa 0f       	add	r26, r26
     ff2:	bb 1f       	adc	r27, r27
     ff4:	8a 95       	dec	r24
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <PORT_Init+0xec>
     ff8:	cd 01       	movw	r24, r26
     ffa:	82 2b       	or	r24, r18
     ffc:	81 bb       	out	0x11, r24	; 17
     ffe:	32 96       	adiw	r30, 0x02	; 2
#include "PORT_Core.h"

void PORT_Init(void)
{
	uint8 cntr=0 , PORT=0 , PIN =0 , DIR= 0;
	for(cntr = 0 ; cntr < DEFINED_PINS ; cntr++ )
    1000:	e4 17       	cp	r30, r20
    1002:	f5 07       	cpc	r31, r21
    1004:	09 f0       	breq	.+2      	; 0x1008 <PORT_Init+0x104>
    1006:	84 cf       	rjmp	.-248    	; 0xf10 <PORT_Init+0xc>
			
			default:
			break;
		}
	}
    1008:	08 95       	ret

0000100a <PWM_Init>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void PWM0_Generate (uint8 Duty_Cycle)
{
    100a:	8f b5       	in	r24, 0x2f	; 47
    100c:	82 60       	ori	r24, 0x02	; 2
    100e:	8f bd       	out	0x2f, r24	; 47
    1010:	8e b5       	in	r24, 0x2e	; 46
    1012:	88 61       	ori	r24, 0x18	; 24
    1014:	8e bd       	out	0x2e, r24	; 46
    1016:	8f b5       	in	r24, 0x2f	; 47
    1018:	80 68       	ori	r24, 0x80	; 128
    101a:	8f bd       	out	0x2f, r24	; 47
    101c:	08 95       	ret

0000101e <PWM1_Generate>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void PWM1_Generate (uint8 Frequency , uint8 Duty_Cycle)
{
    101e:	cf 93       	push	r28
    1020:	c6 2f       	mov	r28, r22
	ICR1_16BIT_ACCESS = ((16000000 / (Frequency * PWM1_PRESC))-1);
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	32 2f       	mov	r19, r18
    1028:	22 27       	eor	r18, r18
    102a:	33 0f       	add	r19, r19
    102c:	33 0f       	add	r19, r19
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	74 e2       	ldi	r23, 0x24	; 36
    1036:	84 ef       	ldi	r24, 0xF4	; 244
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__divmodsi4>
    103e:	21 50       	subi	r18, 0x01	; 1
    1040:	31 09       	sbc	r19, r1
    1042:	37 bd       	out	0x27, r19	; 39
    1044:	26 bd       	out	0x26, r18	; 38
	OCR1A_16BIT_ACCESS = (((Duty_Cycle * (ICR1_16BIT_ACCESS+1))/100)-1);
    1046:	86 b5       	in	r24, 0x26	; 38
    1048:	97 b5       	in	r25, 0x27	; 39
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	c8 9f       	mul	r28, r24
    104e:	90 01       	movw	r18, r0
    1050:	c9 9f       	mul	r28, r25
    1052:	30 0d       	add	r19, r0
    1054:	11 24       	eor	r1, r1
    1056:	36 95       	lsr	r19
    1058:	27 95       	ror	r18
    105a:	36 95       	lsr	r19
    105c:	27 95       	ror	r18
    105e:	ab e7       	ldi	r26, 0x7B	; 123
    1060:	b4 e1       	ldi	r27, 0x14	; 20
    1062:	0e 94 89 08 	call	0x1112	; 0x1112 <__umulhisi3>
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	9b bd       	out	0x2b, r25	; 43
    106e:	8a bd       	out	0x2a, r24	; 42
	//PRESCALER
	TCCR1B |= 0X05;
    1070:	8e b5       	in	r24, 0x2e	; 46
    1072:	85 60       	ori	r24, 0x05	; 5
    1074:	8e bd       	out	0x2e, r24	; 46
}
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <UART_Init>:
	{
		REC_Status = 1;
		ReceivedData_FLAG =0;
	}
	return REC_Status;
}
    107a:	80 b5       	in	r24, 0x20	; 32
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	80 bd       	out	0x20, r24	; 32
    1080:	80 b5       	in	r24, 0x20	; 32
    1082:	8f 7b       	andi	r24, 0xBF	; 191
    1084:	80 bd       	out	0x20, r24	; 32
    1086:	80 b5       	in	r24, 0x20	; 32
    1088:	8e 7f       	andi	r24, 0xFE	; 254
    108a:	80 bd       	out	0x20, r24	; 32
    108c:	80 b5       	in	r24, 0x20	; 32
    108e:	8f 7e       	andi	r24, 0xEF	; 239
    1090:	80 bd       	out	0x20, r24	; 32
    1092:	80 b5       	in	r24, 0x20	; 32
    1094:	8f 7d       	andi	r24, 0xDF	; 223
    1096:	80 bd       	out	0x20, r24	; 32
    1098:	80 b5       	in	r24, 0x20	; 32
    109a:	86 68       	ori	r24, 0x86	; 134
    109c:	80 bd       	out	0x20, r24	; 32
    109e:	52 98       	cbi	0x0a, 2	; 10
    10a0:	80 b5       	in	r24, 0x20	; 32
    10a2:	87 7f       	andi	r24, 0xF7	; 247
    10a4:	80 bd       	out	0x20, r24	; 32
    10a6:	57 9a       	sbi	0x0a, 7	; 10
    10a8:	56 9a       	sbi	0x0a, 6	; 10
    10aa:	53 9a       	sbi	0x0a, 3	; 10
    10ac:	54 9a       	sbi	0x0a, 4	; 10
    10ae:	87 e6       	ldi	r24, 0x67	; 103
    10b0:	89 b9       	out	0x09, r24	; 9
    10b2:	08 95       	ret

000010b4 <UART_ReceiveByte>:
    10b4:	8c b1       	in	r24, 0x0c	; 12
    10b6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <UART_RECEIVED_BYTE>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ReceivedByte_FLAG>
    10c0:	08 95       	ret

000010c2 <UART_ReceivedByte_Status>:

uint8 UART_ReceivedByte_Status (void)
{
	uint8 REC_Status =0;
	
	if (ReceivedByte_FLAG == 1)
    10c2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ReceivedByte_FLAG>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <UART_ReceivedByte_Status+0xe>
	{
		REC_Status = 1;
		ReceivedByte_FLAG =0;
    10ca:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <ReceivedByte_FLAG>
    10ce:	08 95       	ret
	return REC_Status;
}

uint8 UART_ReceivedByte_Status (void)
{
	uint8 REC_Status =0;
    10d0:	80 e0       	ldi	r24, 0x00	; 0
	{
		REC_Status = 1;
		ReceivedByte_FLAG =0;
	}
	return REC_Status;
}
    10d2:	08 95       	ret

000010d4 <__divmodsi4>:
    10d4:	05 2e       	mov	r0, r21
    10d6:	97 fb       	bst	r25, 7
    10d8:	1e f4       	brtc	.+6      	; 0x10e0 <__divmodsi4+0xc>
    10da:	00 94       	com	r0
    10dc:	0e 94 81 08 	call	0x1102	; 0x1102 <__negsi2>
    10e0:	57 fd       	sbrc	r21, 7
    10e2:	07 d0       	rcall	.+14     	; 0x10f2 <__divmodsi4_neg2>
    10e4:	0e 94 98 08 	call	0x1130	; 0x1130 <__udivmodsi4>
    10e8:	07 fc       	sbrc	r0, 7
    10ea:	03 d0       	rcall	.+6      	; 0x10f2 <__divmodsi4_neg2>
    10ec:	4e f4       	brtc	.+18     	; 0x1100 <__divmodsi4_exit>
    10ee:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__negsi2>

000010f2 <__divmodsi4_neg2>:
    10f2:	50 95       	com	r21
    10f4:	40 95       	com	r20
    10f6:	30 95       	com	r19
    10f8:	21 95       	neg	r18
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	4f 4f       	sbci	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255

00001100 <__divmodsi4_exit>:
    1100:	08 95       	ret

00001102 <__negsi2>:
    1102:	90 95       	com	r25
    1104:	80 95       	com	r24
    1106:	70 95       	com	r23
    1108:	61 95       	neg	r22
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__umulhisi3>:
    1112:	a2 9f       	mul	r26, r18
    1114:	b0 01       	movw	r22, r0
    1116:	b3 9f       	mul	r27, r19
    1118:	c0 01       	movw	r24, r0
    111a:	a3 9f       	mul	r26, r19
    111c:	70 0d       	add	r23, r0
    111e:	81 1d       	adc	r24, r1
    1120:	11 24       	eor	r1, r1
    1122:	91 1d       	adc	r25, r1
    1124:	b2 9f       	mul	r27, r18
    1126:	70 0d       	add	r23, r0
    1128:	81 1d       	adc	r24, r1
    112a:	11 24       	eor	r1, r1
    112c:	91 1d       	adc	r25, r1
    112e:	08 95       	ret

00001130 <__udivmodsi4>:
    1130:	a1 e2       	ldi	r26, 0x21	; 33
    1132:	1a 2e       	mov	r1, r26
    1134:	aa 1b       	sub	r26, r26
    1136:	bb 1b       	sub	r27, r27
    1138:	fd 01       	movw	r30, r26
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <__udivmodsi4_ep>

0000113c <__udivmodsi4_loop>:
    113c:	aa 1f       	adc	r26, r26
    113e:	bb 1f       	adc	r27, r27
    1140:	ee 1f       	adc	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	a2 17       	cp	r26, r18
    1146:	b3 07       	cpc	r27, r19
    1148:	e4 07       	cpc	r30, r20
    114a:	f5 07       	cpc	r31, r21
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__udivmodsi4_ep>
    114e:	a2 1b       	sub	r26, r18
    1150:	b3 0b       	sbc	r27, r19
    1152:	e4 0b       	sbc	r30, r20
    1154:	f5 0b       	sbc	r31, r21

00001156 <__udivmodsi4_ep>:
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	1a 94       	dec	r1
    1160:	69 f7       	brne	.-38     	; 0x113c <__udivmodsi4_loop>
    1162:	60 95       	com	r22
    1164:	70 95       	com	r23
    1166:	80 95       	com	r24
    1168:	90 95       	com	r25
    116a:	9b 01       	movw	r18, r22
    116c:	ac 01       	movw	r20, r24
    116e:	bd 01       	movw	r22, r26
    1170:	cf 01       	movw	r24, r30
    1172:	08 95       	ret

00001174 <_exit>:
    1174:	f8 94       	cli

00001176 <__stop_program>:
    1176:	ff cf       	rjmp	.-2      	; 0x1176 <__stop_program>
